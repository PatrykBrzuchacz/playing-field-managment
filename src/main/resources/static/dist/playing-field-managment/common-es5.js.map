{"version":3,"sources":["src/app/shared/service/playing-field.service.ts","src/app/shared/service/register-worker.service.ts","src/app/shared/utils/datePickerValidator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"rxjs\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { environment } from \"@env/environment\";\r\nimport { AvailabilityWithMatchesDto, MatchDto } from \"../model/availability\";\r\nimport { PlayingFieldSetupDto, SearchDto } from \"../model/playing-field\";\r\n\r\nconst API_URL = environment.apiUrl;\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class PlayingFieldService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  deletePFAvailability(id) {\r\n    return this.http.delete(\r\n      `${API_URL}/worker/playingField/playingFieldAvailability/${id}`\r\n    );\r\n  }\r\n  getPFSetup(id) {\r\n    return this.http.get<PlayingFieldSetupDto>(\r\n      `${API_URL}/playingField/${id}/setup`\r\n    );\r\n  }\r\n\r\n  getPFAvailabilities(id, showAll): Observable<AvailabilityWithMatchesDto[]> {\r\n    return this.http.get<AvailabilityWithMatchesDto[]>(\r\n      `${API_URL}/playingField/availabilities/${id}`,\r\n      { params: { showAll: showAll } }\r\n    );\r\n  }\r\n\r\n  getMatches(id, searchDto: SearchDto, httpParams?: HttpParams | any): Observable<any[]> {\r\n    return this.http.post<any[]>(\r\n      `${API_URL}/playingField/${id}/matches/search`,\r\n      searchDto, {params: httpParams}\r\n    );\r\n  }\r\n}\r\n","import { HttpParams, HttpHeaders, } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { UserDto, UserCredentials} from '../model';\n\nimport {HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { WorkerRequest } from '../model/worker-request';\nimport { PlayingFieldDto } from '../model/google-map';\n\n\nconst API_URL = environment.apiUrl;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterWorkerService {\n\n  public user: UserDto;\n  constructor(private http: HttpClient) { }\n\n  // registerWorker(userCredentials: UserCredentials, file:File){\n  //   let formData = new FormData();\n  //   formData.append('file', file);\n  //   formData.append('userCredentials', '{ \"username\": \"'+  userCredentials.username +'\",'+ '\"password\":\"'+userCredentials.password + '\"}')\n\n  //   return this.http\n  //     .post(`${API_URL}/workerRequests/worker/signup`, formData\n  //     );\n  // }\n\n  getWorkerRequests(): Observable<WorkerRequest[]> {\n    return this.http.get<WorkerRequest[]>(`${API_URL}/workerRequests`);\n  }\n  acceptWorkerRequest(id: number) {\n    const params = { \"decision\" : \"true\"};\n    return this.http.put<any>(`${API_URL}/workerRequests/` + id, null, {params} );\n  }\n\n  declineWorkerRequest(id: number) {\n    const params = { \"decision\" : \"false\"};\n    return this.http.put<any>(`${API_URL}/workerRequests/` + id, null, {params} );\n  }\n  sendRequestToAssignPF(pf: PlayingFieldDto, file:File){\n    let formData = new FormData();\n    formData.append('file', file);\n    formData.append('playingField', '{ \"apiId\": \"'+  pf.apiId +'\",'+ '\"name\": \"'+ pf.name + '\",'+'\"lat\":\"'+pf.location.lat+ '\",'+\n    '\"lng\":\"'+pf.location.lng +'\",'+  '\"formattedAddress\":\"'+pf.location.formattedAddress + '\"}');\n\n    return this.http.post(`${API_URL}/assignToWorker`, formData);\n  }\n\n  sendRequestToAssignPFAndRegister(pf: PlayingFieldDto, file:File, login: string, password: string): Observable<any> {\n    let formData = new FormData();\n    formData.append('file', file);\n    formData.append('playingField', '{ \"apiId\": \"'+  pf.apiId +'\",'+ '\"name\": \"'+ pf.name + '\",'+'\"lat\":\"'+pf.location.lat+ '\",'+\n    '\"lng\":\"'+pf.location.lng +'\",'+  '\"formattedAddress\":\"'+pf.location.formattedAddress + '\"}');\n    formData.append('username', login);\n    formData.append('password', password);\n\n    return this.http.post(`${API_URL}/assignToWorkerAndRegister`, formData);\n  }\n\n\n\n}\n","import { AbstractControl, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nexport class DatePickerValidator extends Validators {\r\n\r\n   static fromDateValidator(fdValue: FormControl) {\r\n    const date = fdValue.value;\r\n    if (date === null || date === '') { return { requiredFromDate: true }; }\r\n\r\n  }\r\n\r\n   static ToDateValidator(todValue: FormControl) {\r\n    const date = todValue.value;\r\n\r\n    if (date === null || date === '') { return { requiredToDate: true }; }\r\n\r\n  }\r\n\r\n// Not working\r\n  static timeValidator(formGroupValues: FormGroup): any {\r\n    console.log(formGroupValues);\r\n    const FromDate = formGroupValues.get('FromDate').value;\r\n    const ToDate = formGroupValues.get('ToDate').value;\r\n    const FromTime = formGroupValues.get('FromTime').value;\r\n    const ToTime = formGroupValues.get('ToTime').value;\r\n\r\n    if (FromDate.toString() === ToDate.toString()) {\r\n      let fromTime = [];\r\n      let toTime = [];\r\n      fromTime = FromTime.split(':');\r\n      toTime = ToTime.split(':');\r\n      if (parseInt(fromTime[0]) > parseInt(toTime[0])) {\r\n      alert('condition satisfied not return any error message');\r\n      return { InValidToTime: true };\r\n        } else if (\r\n        parseInt(fromTime[0]) === parseInt(toTime[0]) &&\r\n        parseInt(fromTime[1]) > parseInt(toTime[1])\r\n      ) {  alert('condition satisfied not return any error message');\r\n          return { InValidToTime: true };\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}