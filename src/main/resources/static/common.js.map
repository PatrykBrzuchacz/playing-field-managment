{"version":3,"sources":["./src/app/shared/service/playing-field.service.ts","./src/app/shared/service/register-worker.service.ts","./src/app/shared/utils/datePickerValidator.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Observable } from \"rxjs\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { environment } from \"@env/environment\";\r\nimport { AvailabilityWithMatchesDto, MatchDto } from \"../model/availability\";\r\nimport { PlayingFieldSetupDto, SearchDto } from \"../model/playing-field\";\r\n\r\nconst API_URL = '/api';\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class PlayingFieldService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  deletePFAvailability(id): Observable<MatchDto[]> {\r\n    return this.http.delete<MatchDto[]>(\r\n      `${API_URL}/worker/playingField/playingFieldAvailability/${id}`\r\n    );\r\n  }\r\n  getPFSetup(id) {\r\n    return this.http.get<PlayingFieldSetupDto>(\r\n      `${API_URL}/playingField/${id}/setup`\r\n    );\r\n  }\r\n\r\n  getPFAvailabilities(id, showAll): Observable<AvailabilityWithMatchesDto[]> {\r\n    return this.http.get<AvailabilityWithMatchesDto[]>(\r\n      `${API_URL}/playingField/availabilities/${id}`,\r\n      { params: { showAll: showAll } }\r\n    );\r\n  }\r\n\r\n  getMatches(id, searchDto: SearchDto, httpParams?: HttpParams | any): Observable<any[]> {\r\n    return this.http.post<any[]>(\r\n      `${API_URL}/playingField/${id}/matches/search`,\r\n      searchDto, {params: httpParams}\r\n    );\r\n  }\r\n}\r\n","import { HttpParams, HttpHeaders, } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { UserDto, UserCredentials} from '../model';\n\nimport {HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { WorkerRequest } from '../model/worker-request';\nimport { PlayingFieldDto } from '../model/google-map';\n\n\nconst API_URL = '/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterWorkerService {\n\n  public user: UserDto;\n  constructor(private http: HttpClient) { }\n\n  // registerWorker(userCredentials: UserCredentials, file:File){\n  //   let formData = new FormData();\n  //   formData.append('file', file);\n  //   formData.append('userCredentials', '{ \"username\": \"'+  userCredentials.username +'\",'+ '\"password\":\"'+userCredentials.password + '\"}')\n\n  //   return this.http\n  //     .post(`${API_URL}/workerRequests/worker/signup`, formData\n  //     );\n  // }\n\n  getWorkerRequests(): Observable<WorkerRequest[]> {\n    return this.http.get<WorkerRequest[]>(`${API_URL}/workerRequests`);\n  }\n  acceptWorkerRequest(id: number) {\n    const params = { \"decision\" : \"true\"};\n    return this.http.put<any>(`${API_URL}/workerRequests/` + id, null, {params} );\n  }\n\n  declineWorkerRequest(id: number) {\n    const params = { \"decision\" : \"false\"};\n    return this.http.put<any>(`${API_URL}/workerRequests/` + id, null, {params} );\n  }\n  sendRequestToAssignPF(pf: PlayingFieldDto, file:File){\n    let formData = new FormData();\n    formData.append('file', file);\n    formData.append('playingField', '{ \"apiId\": \"'+  pf.apiId +'\",'+ '\"name\": \"'+ pf.name + '\",'+'\"lat\":\"'+pf.location.lat+ '\",'+\n    '\"lng\":\"'+pf.location.lng +'\",'+  '\"formattedAddress\":\"'+pf.location.formattedAddress + '\"}');\n\n    return this.http.post(`${API_URL}/assignToWorker`, formData);\n  }\n\n  sendRequestToAssignPFAndRegister(pf: PlayingFieldDto, file:File, login: string, password: string): Observable<any> {\n    let formData = new FormData();\n    formData.append('file', file);\n    formData.append('playingField', '{ \"apiId\": \"'+  pf.apiId +'\",'+ '\"name\": \"'+ pf.name + '\",'+'\"lat\":\"'+pf.location.lat+ '\",'+\n    '\"lng\":\"'+pf.location.lng +'\",'+  '\"formattedAddress\":\"'+pf.location.formattedAddress + '\"}');\n    formData.append('username', login);\n    formData.append('password', password);\n\n    return this.http.post(`${API_URL}/assignToWorkerAndRegister`, formData);\n  }\n\n\n\n}\n","import { AbstractControl, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nexport class DatePickerValidator extends Validators {\r\n\r\n   static fromDateValidator(fdValue: FormControl) {\r\n    const date = fdValue.value;\r\n    if (date === null || date === '') { return { requiredFromDate: true }; }\r\n\r\n  }\r\n\r\n   static ToDateValidator(todValue: FormControl) {\r\n    const date = todValue.value;\r\n\r\n    if (date === null || date === '') { return { requiredToDate: true }; }\r\n\r\n  }\r\n\r\n// Not working\r\n  static timeValidator(formGroupValues: FormGroup): any {\r\n    console.log(formGroupValues);\r\n    const FromDate = formGroupValues.get('FromDate').value;\r\n    const ToDate = formGroupValues.get('ToDate').value;\r\n    const FromTime = formGroupValues.get('FromTime').value;\r\n    const ToTime = formGroupValues.get('ToTime').value;\r\n\r\n    if (FromDate.toString() === ToDate.toString()) {\r\n      let fromTime = [];\r\n      let toTime = [];\r\n      fromTime = FromTime.split(':');\r\n      toTime = ToTime.split(':');\r\n      if (parseInt(fromTime[0]) > parseInt(toTime[0])) {\r\n      alert('condition satisfied not return any error message');\r\n      return { InValidToTime: true };\r\n        } else if (\r\n        parseInt(fromTime[0]) === parseInt(toTime[0]) &&\r\n        parseInt(fromTime[1]) > parseInt(toTime[1])\r\n      ) {  alert('condition satisfied not return any error message');\r\n          return { InValidToTime: true };\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}